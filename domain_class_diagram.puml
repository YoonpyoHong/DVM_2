@startuml
class domain.payment.CardReader {
- {static} Map<String,Card> cards
+ boolean checkCardValidity(String,int)
+ Card getCardInfo(String)
+ String encodeCardNum(String)
- void loadCardList()
}
class domain.payment.PaymentManager {
+ boolean payment(CardReader,int,String)
+ void cancelPayment(CardReader,int,String)
}
class domain.product.ItemManager {
+ {static} int MAX_QUANTITY
+ {static} int MAX_ITEM
+ {static} int MAX_LOCAL_ITEM
- {static} Item[] items
+ boolean checkStock(int,int)
+ void updateStockInfo(int,int)
+ void updateQuantity(int,int)
+ boolean checkProduct(int)
+ void synchronize(int,int,String)
+ Item[] getItemList()
- void loadItemList()
+ void showItemList()
}
class domain.payment.Verification {
- int itemId
- int itemQuantity
- String verificationCode
- boolean verificationValidity
+ boolean getVerificationValidity()
+ int getItemId()
+ int getItemQuantity()
+ String getVerificationCode()
+ String toString()
}
class domain.admin.AccountManager {
- {static} String PASSWORD
+ boolean verifyLoginInfo(String)
}
class domain.app.Main {
+ {static} void main(String[])
- {static} void testMessageManager()
- {static} void testCardReader()
- {static} void testVerificationManager()
- {static} void testUI()
- {static} void testController()
}
class domain.Controller {
- PaymentManager paymentManager
- CardReader cardReader
- ItemManager itemManager
- AccountManager accountManager
- MessageManager messageManager
- VerificationManager verificationManager
- {static} Item[] items
+ {static} void turnMachineOn()
+ String selectItem(int,int,int[])
+ String payment(int,int,String,int)
+ String prepayment(int,int,String,int,int)
+ Verification comfirmVerification(String)
+ Item[] getItemList()
+ AccountManager getAccountManager()
+ MessageManager getMsgManager()
+ ItemManager getItemManager()
+ CardReader getCardReader()
+ PaymentManager getPaymentManager()
+ VerificationManager getVerificationManager()
}
class domain.product.Item {
- int itemId
- String itemName
- int itemPrice
- AtomicInteger itemQuantity
- boolean onSale
+ int getItemId()
+ void setItemId(int)
+ int getItemQuantity()
+ void setItemQuantity(int)
+ String getItemName()
+ void setItemName(String)
+ int getItemPrice()
+ void setItemPrice(int)
+ boolean getOnSale()
+ String toString()
}
class domain.message.MessageManager {
- {static} int WAIT_TIME
- {static} String DVM_ID
- {static} int DVM_X
- {static} int DVM_Y
- {static} int TOTAL_DVM_COUNT
- {static} String[] IP_ADDR
- {static} String NULL_AUTH_CODE
- {static} Deque<Message> msgQueue
- OtherVM oVM
- MsgReceiver msgReceiver
+ void run()
+ int[] checkStockOfOtherVM(int,int)
+ void sendMsg(int,Message)
+ void sendPrepaymentInfo(int,int,int,String)
+ void sendStockMsg(int,int,int)
+ void sendProductMsg(int,int,int)
- Message setMsg(String,int,int,String,String)
- void setMsgDes(Message.MessageDescription,int,int,String)
- int[] decodeMsg(Message)
}
class domain.message.MessageManager.OtherVM {
- {static} DVMServer server
+ void run()
}
class domain.message.MessageManager.MsgReceiver {
- ItemManager itemManager
+ void run()
}
class domain.payment.Card {
+ {static} int CARD_NUM_LENGTH
- String cardNum
- int cardPwd
- int money
+ String getCardNum()
+ int getCardPwd()
+ int getMoney()
+ void setMoney(int)
+ String toString()
}
class domain.payment.VerificationManager {
+ {static} int CODE_LEN
- {static} int LETTER
- {static} String letterSet
- {static} Random rand
- {static} Map<String,Verification> verifications
- void loadTestVerification()
+ String createVerificationCode()
+ void saveVerification(int,int,String,boolean)
+ Verification checkVerification(String)
- boolean isValidCode(String)
+ void removeVerification(String)
}


domain.message.Thread <|-- domain.message.MessageManager
domain.message.MessageManager +.. domain.message.MessageManager.OtherVM
domain.message.Thread <|-- domain.message.MessageManager.OtherVM
domain.message.MessageManager +.. domain.message.MessageManager.MsgReceiver
domain.message.Thread <|-- domain.message.MessageManager.MsgReceiver
@enduml